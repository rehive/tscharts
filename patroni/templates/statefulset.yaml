apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "patroni.fullname" . }}
  labels:
    app: {{ template "patroni.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    application: {{ template "patroni.name" . }}
    cluster: {{ template "patroni.fullname" . }}
spec:
  serviceName: {{ template "patroni.fullname" . }}
  replicas: {{ .Values.replicas }}
  template:
    metadata:
      labels:
        app: {{ template "patroni.name" . }}
        release: {{ .Release.Name }}
        application: {{ template "patroni.name" . }}
        cluster: {{ template "patroni.fullname" . }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: patroni-service-account
      automountServiceAccountToken: true
      {{- end}}
      containers:
        - name: spilo
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DEBUG
              value: .Values.debug
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: DCS_ENABLE_KUBERNETES_API
              value: "true"
            - name: USE_KUBERNETES
              value: "true"
          {{- if .Values.useConfigMaps }}
            - name: KUBERNETES_USE_CONFIGMAPS
              value: "true"
          {{- end }}
            - name: PATRONI_CONFIGURATION
              value: |
                kubernetes:
                  labels:
                    app: {{ template "patroni.name" . }}
                    release: {{ .Release.Name }}
                    application: {{ template "patroni.name" . }}
                    cluster: {{ template "patroni.fullname" . }}
                  scope_label: cluster
                postgresql:
{{ toYaml .Values.postgresParameters | indent 18 }}
            - name: SCOPE
              value: {{ template "patroni.fullname" . }}
            - name: PGPASSWORD_SUPERUSER
              valueFrom:
                secretKeyRef:
                  name: {{ template "patroni.fullname" . }}
                  key: password-superuser
            - name: PGPASSWORD_ADMIN
              valueFrom:
                secretKeyRef:
                  name: {{ template "patroni.fullname" . }}
                  key: password-admin
            - name: PGPASSWORD_STANDBY
              valueFrom:
                secretKeyRef:
                  name: {{ template "patroni.fullname" . }}
                  key: password-standby
            - name: PGROOT
              value: /home/postgres/pgdata
        {{ if .Values.walE.enable }}
            - name: USE_WALE
              value: {{ .Values.walE.enable | quote }}
          {{ if .Values.walE.envDir }}
            - name: WALE_ENV_DIR
              value: {{ .Values.walE.envDir | quote }}
          {{ end }}
          {{ if .Values.walE.scheduleCronJob }}
            - name: BACKUP_SCHEDULE
              value: {{ .Values.walE.scheduleCronJob | quote }}
          {{ end }}
          {{ if .Values.walE.retainBackups }}
            - name: BACKUP_NUM_TO_RETAIN
              value: {{ .Values.walE.retainBackups | quote }}
          {{ end }}
          {{ if .Values.walE.s3Bucket }}
            - name: WAL_S3_BUCKET
              value: {{ .Values.walE.s3Bucket | quote }}
          {{ else if .Values.walE.gcsBucket }}
            - name: WAL_GCS_BUCKET
              value: {{ .Values.walE.gcsBucket | quote }}
            {{ if and .Values.walE.enable .Values.walE.kubernetesSecret }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/credentials/{{ .Values.walE.kubernetesSecret }}.json"
            {{ end }}
          {{ end }}
          {{ if .Values.walE.backupThresholdMegabytes }}
            - name: WALE_BACKUP_THRESHOLD_MEGABYTES
              value: {{ .Values.walE.backupThresholdMegabytes | quote }}
          {{ end }}
          {{if .Values.walE.backupThresholdPercentage }}
            - name: WALE_BACKUP_THRESHOLD_PERCENTAGE
              value: {{ .Values.walE.backupThresholdPercentage | quote }}
          {{ end }}
        {{ end }}
        {{ if .Values.cloneWithWale.enable }}
            - name: CLONE_WITH_WALE
              value: "true"
            - name: CLONE_WALE_ENV_DIR
              value: {{ .Values.cloneWithWale.cloneWaleEnvDir | quote }}
            - name: CLONE_WAL_GCS_BUCKET
              value: {{ .Values.cloneWithWale.cloneWalGcsBucket | quote }}
            - name: CLONE_WAL_GSC_BUCKET # Mistake in spilo
              value: {{ .Values.cloneWithWale.cloneWalGcsBucket | quote }}
            - name: CLONE_SCOPE
              value: {{ .Values.cloneWithWale.cloneScope | quote }}
            - name: CLONE_METHOD
              value: "CLONE_WITH_WALE"
        {{ end }}
          ports:
            - containerPort: 8008
              name: patroni
              protocol: TCP
            - containerPort: 5432
              name: postgresql
              protocol: TCP
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: /home/postgres/pgdata
      {{ if and .Values.walE.enable .Values.walE.kubernetesSecret }}
            - name: {{ .Values.walE.kubernetesSecret }}
              mountPath: /etc/credentials
              readOnly: true
      volumes:
        - name: {{ .Values.walE.kubernetesSecret }}
          secret:
            secretName: {{ .Values.walE.kubernetesSecret }}
      {{ end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
    {{ end }}
    {{- if eq .Values.podAntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "patroni.name" . }}"
                  release: "{{ .Release.Name }}"
    {{- else if eq .Values.podAntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: "{{ template "patroni.name" . }}"
                    release: "{{ .Release.Name }}"
    {{- end }}
{{ if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      {{- if .Values.persistentVolume.annotations }}
        annotations:
{{ toYaml .Values.persistentVolume.annotations | indent 10 }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
    {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
    {{- end }}
{{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}
